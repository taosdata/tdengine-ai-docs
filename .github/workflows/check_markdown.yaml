name: TDasset Docs Check and Build

on:
  pull_request:
    branches:
      - 'main'
    paths:
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
permissions:
  contents: read
  pull-requests: write

jobs:
  check-docs:
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install markdownlint
        run: sudo npm install -g markdownlint-cli

      - name: Markdown Lint
        run: markdownlint -c .github/workflows/markdown_config.json ./

      - name: Typos Check (zh config)
        uses: crate-ci/typos@v1.31.1
        with:
          files: 'docs/**/*.md'
          config: .github/workflows/typos.toml
          
      - name: check docs linter-formatter using AutoCorrect
        uses: huacnlee/autocorrect-action@v2
        with:
          args: --lint docs/**/*.md

      - name: Report ReviewDog
        if: always()
        uses: tomchon/autocorrect-action@fix/review-dog
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          reviewdog: true
          args: ./docs/**/*.md

  build-doc:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '18'
      PNPM_VERSION: '9'
      PYTHON_VERSION: '3.10'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: use node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: use pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: use python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
            
      - name: set env
        run: |
          echo "VERSION=latest" >> $GITHUB_ENV
          echo "DOCS_TYPE=tdasset" >> $GITHUB_ENV

      - name: generate version config
        run: |
          python3 .github/scripts/generate_version.py $(git tag | egrep "v(.*)$" | xargs echo -n) > test_versions.json
          cat test_versions.json

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: build docs
        run: |
          pnpm install
          pnpm run build